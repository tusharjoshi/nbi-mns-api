import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'org.springframework.boot' version '3.2.1'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.openapi.generator' version '7.2.0'
}

group = 'com.ems'
version = '1.0.0'
description = '3GPP NBI API Library'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    withJavadocJar()
    withSourcesJar()
}

// Configure source sets to include generated sources
sourceSets {
    main {
        java {
            srcDirs += "${buildDir}/generated-sources/src/main/java"
        }
    }
}

repositories {
    mavenCentral()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

// Task to clone the 3GPP MnS repository
tasks.register('cloneMnSRepository') {
    group = 'repository-setup'
    description = 'Clone the 3GPP MnS repository and checkout Rel-17 branch'
    
    def apiSpecsDir = file("${rootDir}/api-specs")
    def repoUrl = 'https://forge.3gpp.org/rep/sa5/MnS.git'
    def branch = 'Rel-17'
    
    // Only run if api-specs directory doesn't exist or is empty
    onlyIf {
        !apiSpecsDir.exists() || apiSpecsDir.listFiles().length == 0
    }
    
    doLast {
        // Create api-specs directory if it doesn't exist
        if (!apiSpecsDir.exists()) {
            apiSpecsDir.mkdirs()
            println "Created directory: ${apiSpecsDir.absolutePath}"
        }
        
        // Clone the repository
        println "Cloning 3GPP MnS repository from ${repoUrl}..."
        exec {
            workingDir rootDir
            commandLine 'git', 'clone', '--branch', branch, '--single-branch', repoUrl, 'api-specs'
        }
        
        println "Successfully cloned 3GPP MnS repository (${branch} branch) to ${apiSpecsDir.absolutePath}"
    }
}

// Task to update the 3GPP MnS repository
tasks.register('updateMnSRepository') {
    group = 'repository-setup'
    description = 'Update the 3GPP MnS repository to latest Rel-17 branch'
    
    def apiSpecsDir = file("${rootDir}/api-specs")
    def branch = 'Rel-17'
    
    // Only run if api-specs directory exists and contains a git repository
    onlyIf {
        apiSpecsDir.exists() && file("${apiSpecsDir}/.git").exists()
    }
    
    doLast {
        println "Updating 3GPP MnS repository to latest ${branch}..."
        exec {
            workingDir apiSpecsDir
            commandLine 'git', 'fetch', 'origin'
        }
        exec {
            workingDir apiSpecsDir
            commandLine 'git', 'checkout', branch
        }
        exec {
            workingDir apiSpecsDir
            commandLine 'git', 'pull', 'origin', branch
        }
        
        println "Successfully updated 3GPP MnS repository to latest ${branch}"
    }
}

// Combined task to ensure repository is available and up-to-date
tasks.register('setupMnSRepository') {
    group = 'repository-setup'
    description = 'Ensure 3GPP MnS repository is cloned and up-to-date'
    dependsOn cloneMnSRepository, updateMnSRepository
}

dependencies {
    // Spring Boot dependencies - using compileOnly to avoid forcing versions
    compileOnly 'org.springframework.boot:spring-boot-starter'
    compileOnly 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.springframework.boot:spring-boot-starter-validation'
    compileOnly 'org.springframework.boot:spring-boot-starter-data-jpa'
    
    // Core API dependencies - these will be provided to consumers
    api 'org.springframework:spring-web'
    api 'org.springframework:spring-context'
    api 'jakarta.validation:jakarta.validation-api'
    api 'io.swagger.core.v3:swagger-annotations:2.2.20'
    
    // Jackson for JSON processing
    api 'com.fasterxml.jackson.core:jackson-databind'
    api 'com.fasterxml.jackson.core:jackson-annotations'
    api 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    api 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'
    
    // OpenAPI and Swagger - optional for consumers
    compileOnly 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
    
    // Bean validation implementation - optional for consumers
    compileOnly 'org.hibernate.validator:hibernate-validator'
    
    // Spring Boot auto-configuration
    compileOnly 'org.springframework.boot:spring-boot-autoconfigure'
    annotationProcessor 'org.springframework.boot:spring-boot-autoconfigure-processor'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    
    // Test dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

tasks.register('generateFaultMnSApi', GenerateTask) {
    group = 'api-generation'
    description = "Generate API artifacts for Fault Management Service (TS28532_FaultMnS)"
    dependsOn generatePerfMnSApi

    generatorName = 'spring'
    inputSpec = "${rootDir}/api-specs/OpenAPI/TS28532_FaultMnS.yaml"
    outputDir = "${buildDir}/generated-sources"
    apiPackage = "com.ems.faultmns.api"
    modelPackage = "com.ems.faultmns.model"
    invokerPackage = "com.ems.faultmns.invoker"

    configOptions = [
            library                   : 'spring-boot',
            dateLibrary               : 'java8',
            java8                     : 'true',
            interfaceOnly             : 'true',
            skipDefaultInterface      : 'true',
            useTags                   : 'true',
            generateApiTests          : 'false',
            generateModelTests        : 'false',
            generateApiDocumentation  : 'true',
            generateModelDocumentation: 'true',
            hideGenerationTimestamp   : 'true',
            useSpringBoot3            : 'true',
            documentationProvider     : 'springdoc',
            openApiNullable           : 'false',
            useBeanValidation         : 'true',
            performBeanValidation     : 'true',
            serializationLibrary      : 'jackson',
            apiNameSuffix             : 'FaultApi'
    ]

    globalProperties = [
            models         : '',
            apis           : '',
            supportingFiles: 'ApiUtil'
    ]
    
    // Use OpenAPI normalizer to add tags and rename the API
    openapiNormalizer = [
            'SET_TAGS_FOR_ALL_OPERATIONS': 'Fault'
    ]
}

tasks.register('generatePerfMnSApi', GenerateTask) {
    group = 'api-generation'
    description = "Generate API artifacts for Performance Management Service (TS28532_PerfMnS)"
    dependsOn setupMnSRepository

    generatorName = 'spring'
    inputSpec = "${rootDir}/api-specs/OpenAPI/TS28532_PerfMnS.yaml"
    outputDir = "${buildDir}/generated-sources"
    apiPackage = "com.ems.perfmns.api"
    modelPackage = "com.ems.perfmns.model"
    invokerPackage = "com.ems.perfmns.invoker"

    configOptions = [
            library                   : 'spring-boot',
            dateLibrary               : 'java8',
            java8                     : 'true',
            interfaceOnly             : 'true',
            skipDefaultInterface      : 'true',
            useTags                   : 'true',
            generateApiTests          : 'false',
            generateModelTests        : 'false',
            generateApiDocumentation  : 'true',
            generateModelDocumentation: 'true',
            hideGenerationTimestamp   : 'true',
            useSpringBoot3            : 'true',
            documentationProvider     : 'springdoc',
            openApiNullable           : 'false',
            useBeanValidation         : 'true',
            performBeanValidation     : 'true',
            serializationLibrary      : 'jackson',
            apiNameSuffix             : 'PerfApi'
    ]

    globalProperties = [
            models         : '',
            apis           : '',
            supportingFiles: 'ApiUtil'
    ]
    
    // Use OpenAPI normalizer to add tags and rename the API
    openapiNormalizer = [
            'SET_TAGS_FOR_ALL_OPERATIONS': 'Perf'
    ]
}

// Ensure generated sources are available for compilation
compileJava.dependsOn generateFaultMnSApi
processResources.dependsOn generateFaultMnSApi
sourcesJar.dependsOn generateFaultMnSApi
javadocJar.dependsOn generateFaultMnSApi

test {
    useJUnitPlatform()
}

// Clean generated sources (they will be in build directory)
clean {
    delete "${buildDir}/generated-sources"
}

// Task to clean the cloned repository (useful for forcing a fresh clone)
tasks.register('cleanMnSRepository') {
    group = 'repository-setup'
    description = 'Remove the cloned 3GPP MnS repository (will be re-cloned on next build)'
    
    doLast {
        def apiSpecsDir = file("${rootDir}/api-specs")
        if (apiSpecsDir.exists()) {
            delete apiSpecsDir
            println "Removed api-specs directory: ${apiSpecsDir.absolutePath}"
        } else {
            println "api-specs directory does not exist"
        }
    }
}

// Configure the jar task for library distribution
jar {
    enabled = true
    archiveClassifier = ''
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// Disable the bootJar task since this is a library
bootJar {
    enabled = false
}