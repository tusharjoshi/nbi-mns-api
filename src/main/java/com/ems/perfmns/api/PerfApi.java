/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.ems.perfmns.api;

import com.ems.perfmns.model.ErrorResponse;
import com.ems.perfmns.model.NotifyThresholdCrossing;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "Perf", description = "the Perf API")
public interface PerfApi {

    /**
     * POST /notificationSink : Send notifications about performance threshold crossing
     * To send a notifyThresholdCrossing notification
     *
     * @param notifyThresholdCrossing  (required)
     * @return Success case (\&quot;204 No Content\&quot;). The notification is successfully delivered. The response message body is absent. (status code 204)
     *         or Error case. (status code 200)
     */
    @Operation(
        operationId = "notificationSinkPost",
        summary = "Send notifications about performance threshold crossing",
        description = "To send a notifyThresholdCrossing notification",
        tags = { "Perf" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success case (\"204 No Content\"). The notification is successfully delivered. The response message body is absent."),
            @ApiResponse(responseCode = "default", description = "Error case.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/notificationSink",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> notificationSinkPost(
        @Parameter(name = "NotifyThresholdCrossing", description = "", required = true) @Valid @RequestBody NotifyThresholdCrossing notifyThresholdCrossing
    );

}
